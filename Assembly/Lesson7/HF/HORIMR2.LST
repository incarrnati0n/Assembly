Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Page     1-1


       1 0000				Code Segment
       2				assume CS:Code, DS:Data, SS:Stack
       3				
       4 0000				Start:
       5 0000  B8 ---- R		    mov ax, Code
       6 0003  8E D8			    mov DS, AX
       7				
       8				    ; Set initial coordinates for Line 
					1
       9 0005  B9 0064			    mov cx, 100
      10 0008  BA 0064			    mov dx, 100
      11				
      12 000B  52			    push dx
      13 000C  51			    push cx
      14				
      15				    ; Set initial coordinates for Line 
					2
      16 000D  B9 00C8			    mov cx, 200
      17 0010  BA 00C8			    mov dx, 200
      18				
      19 0013  52			    push dx
      20 0014  51			    push cx
      21				
      22 0015  B8 0013			    mov ax, 13h
      23 0018  CD 10			    int 10h
      24				
      25 001A  B8 A000			    mov ax, 0a000h
      26 001D  8E C0			    mov es, ax
      27				
      28 001F				Rajz1:
      29 001F  59			    pop cx
      30				
      31				    ; Handle input for Line 1
      32 0020  33 C0			    xor ax, ax
      33 0022  8B C1			    mov ax, cx
      34				
      35 0024  51			    push cx
      36 0025  BB 0140			    mov bx, 320
      37 0028  F7 E3			    mul bx
      38				
      39 002A  59			    pop cx
      40 002B  5A			    pop dx
      41 002C  03 C2			    add ax, dx
      42 002E  73 1B			    jnc Pixel1
      43 0030  FE C4			    inc ah
      44				
      45 0032  EB 17 90			    jmp Pixel1
      46				
      47 0035				Rajz2:
      48 0035  59			    pop cx
      49				
      50				    ; Handle input for Line 2
      51 0036  33 C0			    xor ax, ax
      52 0038  8B C1			    mov ax, cx
Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Page     1-2


      53				
      54 003A  51			    push cx
      55 003B  BB 0140			    mov bx, 320
      56 003E  F7 E3			    mul bx
      57				
      58 0040  59			    pop cx
      59 0041  5A			    pop dx
      60 0042  03 C2			    add ax, dx
      61 0044  73 11			    jnc Pixel2
      62 0046  FE C4			    inc ah
      63				
      64 0048  EB 0D 90			    jmp Pixel2
      65				
      66 004B				Pixel1:
      67 004B  52			    push dx
      68 004C  51			    push cx
      69 004D  8B F8			    mov di, ax
      70 004F  B0 01			    mov al, 1
      71 0051  26: 88 05		    mov es:[di], al
      72				
      73 0054  EB 0D 90			    jmp Var1
      74				
      75 0057				Pixel2:
      76 0057  52			    push dx
      77 0058  51			    push cx
      78 0059  8B F8			    mov di, ax
      79 005B  B0 04			    mov al, 4
      80 005D  26: 88 05		    mov es:[di], al
      81				
      82 0060  EB 54 90			    jmp Var2
      83				
      84 0063				Var1:
      85 0063  33 C0			    xor ax, ax
      86 0065  CD 16			    int 16h
      87				
      88				    ; Input handling for Line 1
      89 0067  3C 1B			    cmp al, 27
      90 0069  74 48			    jz JumpHelper1
      91				
      92 006B  80 FC 4B			    cmp ah, 75
      93 006E  74 11			    jz Balra1
      94				
      95 0070  80 FC 4D			    cmp ah, 77
      96 0073  74 18			    jz Jobbra1
      97				
      98 0075  80 FC 48			    cmp ah, 72
      99 0078  74 20			    jz Felfele1
     100				
     101 007A  80 FC 50			    cmp ah, 80
     102 007D  74 27			    jz Lefele1
     103				
     104 007F  EB E2			    jmp Var1
     105				
     106 0081				Balra1:
Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Page     1-3


     107 0081  59			    pop cx
     108 0082  5A			    pop dx
     109 0083  4A			    dec dx
     110 0084  83 FA 01			    cmp dx, 1
     111 0087  73 75			    jnc Tarol1
     112 0089  42			    inc dx
     113 008A  EB 72 90			    jmp Tarol1
     114				
     115 008D				Jobbra1:
     116 008D  59			    pop cx
     117 008E  5A			    pop dx
     118 008F  42			    inc dx
     119 0090  81 FA 0140		    cmp dx, 320
     120 0094  72 68			    jc Tarol1
     121 0096  4A			    dec dx
     122 0097  EB 65 90			    jmp Tarol1
     123				
     124 009A				Felfele1:
     125 009A  59			    pop cx
     126 009B  5A			    pop dx
     127 009C  49			    dec cx
     128 009D  83 F9 01			    cmp cx, 1
     129 00A0  73 5C			    jnc Tarol1
     130 00A2  41			    inc cx
     131 00A3  EB 59 90			    jmp Tarol1
     132				
     133 00A6				Lefele1:
     134 00A6  59			    pop cx
     135 00A7  5A			    pop dx
     136 00A8  41			    inc cx
     137 00A9  81 F9 00C8		    cmp cx, 200
     138 00AD  72 4F			    jc Tarol1
     139 00AF  49			    dec cx
     140 00B0  EB 4C 90			    jmp Tarol1
     141				
     142 00B3				JumpHelper1:
     143 00B3  EB 53 90			    jmp Program_Vege
     144				
     145 00B6				Var2:
     146 00B6  33 C0			    xor ax, ax
     147 00B8  CD 16			    int 16h
     148				
     149				    ; Input handling for Line 2
     150 00BA  3C 61			    cmp al, 'a'
     151 00BC  74 0E			    jz Balra2
     152				
     153 00BE  3C 73			    cmp al, 's'
     154 00C0  74 2F			    jz Lefele2
     155				
     156 00C2  3C 77			    cmp al, 'w'
     157 00C4  74 1F			    jz Felfele2
     158				
     159 00C6  3C 64			    cmp al, 'd'
     160 00C8  74 0E			    jz Jobbra2
Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Page     1-4


     161				
     162 00CA  EB EA			    jmp Var2
     163				
     164 00CC				Balra2:
     165 00CC  59			    pop cx
     166 00CD  5A			    pop dx
     167 00CE  4A			    dec dx
     168 00CF  83 FA 01			    cmp dx, 1
     169 00D2  73 2F			    jnc Tarol2
     170 00D4  42			    inc dx
     171 00D5  EB 2C 90			    jmp Tarol2
     172				
     173 00D8				Jobbra2:
     174 00D8  59			    pop cx
     175 00D9  5A			    pop dx
     176 00DA  42			    inc dx
     177 00DB  81 FA 0140		    cmp dx, 320
     178 00DF  72 22			    jc Tarol2
     179 00E1  4A			    dec dx
     180 00E2  EB 1F 90			    jmp Tarol2
     181				
     182 00E5				Felfele2:
     183 00E5  59			    pop cx
     184 00E6  5A			    pop dx
     185 00E7  49			    dec cx
     186 00E8  83 F9 01			    cmp cx, 1
     187 00EB  73 16			    jnc Tarol2
     188 00ED  41			    inc cx
     189 00EE  EB 13 90			    jmp Tarol2
     190				
     191 00F1				Lefele2:
     192 00F1  59			    pop cx
     193 00F2  5A			    pop dx
     194 00F3  41			    inc cx
     195 00F4  81 F9 00C8		    cmp cx, 200
     196 00F8  72 09			    jc Tarol2
     197 00FA  49			    dec cx
     198 00FB  EB 06 90			    jmp Tarol2
     199				
     200 00FE				Tarol1:
     201 00FE  52			    push dx
     202 00FF  51			    push cx
     203 0100  E9 001F R		    jmp Rajz1
     204				
     205 0103				Tarol2:
     206 0103  52			    push dx
     207 0104  51			    push cx
     208 0105  E9 0035 R		    jmp Rajz2
     209				
     210 0108				Program_Vege:
     211 0108  B8 0003			    mov ax, 03h
     212 010B  CD 10			    int 10h
     213				
     214 010D  59			    pop cx
Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Page     1-5


     215 010E  5A			    pop dx
     216				
     217 010F  B8 4C00			    mov ax, 4c00h
     218 0112  CD 21			    int 21h
     219				
     220 0114				Code Ends
     221 0000				Data Segment
     222 0000				Data Ends
     223 0000				Stack Segment
     224 0000				Stack Ends
     225				End Start
Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

CODE . . . . . . . . . . . . . .  	0114	PARA	NONE	
DATA . . . . . . . . . . . . . .  	0000	PARA	NONE	
STACK  . . . . . . . . . . . . .  	0000	PARA	NONE	

Symbols:            

                N a m e         	Type	 Value	 Attr

BALRA1 . . . . . . . . . . . . .  	L NEAR	0081	CODE
BALRA2 . . . . . . . . . . . . .  	L NEAR	00CC	CODE

FELFELE1 . . . . . . . . . . . .  	L NEAR	009A	CODE
FELFELE2 . . . . . . . . . . . .  	L NEAR	00E5	CODE

JOBBRA1  . . . . . . . . . . . .  	L NEAR	008D	CODE
JOBBRA2  . . . . . . . . . . . .  	L NEAR	00D8	CODE
JUMPHELPER1  . . . . . . . . . .  	L NEAR	00B3	CODE

LEFELE1  . . . . . . . . . . . .  	L NEAR	00A6	CODE
LEFELE2  . . . . . . . . . . . .  	L NEAR	00F1	CODE

PIXEL1 . . . . . . . . . . . . .  	L NEAR	004B	CODE
PIXEL2 . . . . . . . . . . . . .  	L NEAR	0057	CODE
PROGRAM_VEGE . . . . . . . . . .  	L NEAR	0108	CODE

RAJZ1  . . . . . . . . . . . . .  	L NEAR	001F	CODE
RAJZ2  . . . . . . . . . . . . .  	L NEAR	0035	CODE

START  . . . . . . . . . . . . .  	L NEAR	0000	CODE

TAROL1 . . . . . . . . . . . . .  	L NEAR	00FE	CODE
TAROL2 . . . . . . . . . . . . .  	L NEAR	0103	CODE

VAR1 . . . . . . . . . . . . . .  	L NEAR	0063	CODE
VAR2 . . . . . . . . . . . . . .  	L NEAR	00B6	CODE

@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@FILENAME  . . . . . . . . . . .  	TEXT  horimr2		
@VERSION . . . . . . . . . . . .  	TEXT  510		

Microsoft (R) Macro Assembler Version 5.10                  11/6/23 09:53:02
                                                             Symbols-2



    225 Source  Lines
    225 Total   Lines
     27 Symbols

  47376 + 457802 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
